{"version":3,"sources":["Picker.js","App.js","serviceWorker.js","index.js"],"names":["randomNum","Math","floor","random","hashSeed","seed","toString","Picker","useParams","console","log","useState","color","setColor","score","setScore","true_color","setTrueColor","useEffect","document","getElementById","style","backgroundColor","body","Button","margin","onClick","cwith","ccolor","_cwith","charAt","substring","_ccolor","_r","parseInt","_g","_b","__r","__g","__b","p1","abs","p2","p3","Number","parseFloat","toPrecision","color_meter","variant","num","to","height","display","onChange","App","setCurrentTime","fetch","then","res","json","data","time","className","id","path","component","exact","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c8130dc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Button } from '@material-ui/core';\nimport { useLocation } from \"react-router-dom\";\nimport { useParams, Redirect, NavLink, Route, Link, BrowserRouter as Router, Switch } from 'react-router-dom'\n\nimport { HexColorPicker } from \"react-colorful\";\nimport \"react-colorful/dist/index.css\";\n\nfunction color_meter(cwith, ccolor) {\n\n  if (!cwith && !ccolor) return;\n\n  var _cwith = (cwith.charAt(0) == \"#\") ? cwith.substring(1, 7) : cwith;\n  var _ccolor = (ccolor.charAt(0) == \"#\") ? ccolor.substring(1, 7) : ccolor;\n\n  var _r = parseInt(_cwith.substring(0, 2), 16);\n  var _g = parseInt(_cwith.substring(2, 4), 16);\n  var _b = parseInt(_cwith.substring(4, 6), 16);\n\n  var __r = parseInt(_ccolor.substring(0, 2), 16);\n  var __g = parseInt(_ccolor.substring(2, 4), 16);\n  var __b = parseInt(_ccolor.substring(4, 6), 16);\n\n  var p1 = Math.abs(((_r - __r) / 255) * 100);\n  var p2 = Math.abs(((_g - __g) / 255) * 100);\n  var p3 = Math.abs(((_b - __b) / 255) * 100);\n\n  return Number.parseFloat(100 - (p1 + p2 + p3) / 3).toPrecision(5);\n}\n\nfunction randomNum() {\n  return Math.floor(Math.random() * 1000000)\n}\n\nfunction randomColor() {\n  return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\n}\n\nfunction hashSeed(seed) {\n  return \"#\" + ((Math.floor(seed) * 6942069420) % 16777215).toString(16);\n}\n\nfunction Picker() {\n  // const location = useLocation();\n  // const seed = new URLSearchParams(location.search).get('session');\n  // console.log(seed)\n\n  const params = useParams();\n  const seed = params['id']\n  console.log(seed);\n\n\n  const [color, setColor] = useState(\"#aabbcc\");\n  const [score, setScore] = useState(\"n/a\");\n  const [true_color, setTrueColor] = seed ? useState(hashSeed(seed)) : useState(randomColor());\n\n  useEffect(() => {\n    document.getElementById('color-box').style.backgroundColor = color\n    document.body.style.backgroundColor = true_color\n  });\n\n  return (\n    <div>\n      <p>Your Score: {score}</p>\n\n      <Button\n        style={{ margin: '5px' }}\n        onClick={() => setScore(color_meter(true_color, color) + '%')}\n        variant='outlined'\n        color=\"inherit\"\n      >Score Me</Button>\n      \n      <Button\n        style={{ margin: '5px' }}\n        onClick={() => {\n          const num = randomNum();\n          <Redirect to={\"/colorpickergame/\" + num} />\n          setTrueColor(hashSeed(num));\n          }}\n        variant='outlined'\n        color=\"inherit\"\n      ><NavLink to={\"/colorpickergame/\" + randomNum()}\n          style={{color: \"white\", 'text-decoration': \"none\"}}\n      >Randomize!</NavLink></Button>\n      \n\n      <span height=\"50px\"></span>\n      <div style={{ display: \"flex\", 'justify-content': \"center\" }}>\n        <HexColorPicker color={color} onChange={setColor} />\n      </div>\n    </div>\n  );\n}\n\nexport default Picker;","import React, { useState, useEffect } from 'react';\nimport { Route, Link, BrowserRouter as Router, Redirect } from 'react-router-dom'\n\nimport './App.css';\nimport Picker from './Picker';\n\nfunction randomNum() {\n  return Math.floor(Math.random() * 1000000)\n}\n\nfunction App() {\n\n  const [currentTime, setCurrentTime] = useState(0);\n\n  useEffect(() => {\n    fetch('/time').then(res => res.json()).then(data => {\n      setCurrentTime(data.time);\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <div> Color Picker! <br>\n        </br>Generate a random color, and try your best to match it on the picker! Good luck!\n        </div>\n        <br></br>\n\n        <div>Your Guess:</div>\n        <div id=\"color-box\"></div>\n\n        <Router>\n          <Route path=\"/colorpickergame/:id\" component={Picker}></Route>\n          <Route exact path=\"/colorpickergame/\"> \n            <Redirect to={\"/colorpickergame/\" + randomNum()} />\n          </Route>\n        </Router>\n\n        <div style={{ marginTop: '20px' }}>\n            Share/Compete with friends by sending them the link!\n        </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}